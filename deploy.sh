#!/bin/bash

# Configuration sp√©cifique √† CE projet
PROJECT_NAME="smaaks-sport-connect"
EXPECTED_DIR="smaaks-sport-connect"

# Couleurs pour le terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# V√©rification 1: Bon dossier ?
CURRENT_DIR=$(basename "$PWD")
if [ "$CURRENT_DIR" != "$EXPECTED_DIR" ]; then
    echo -e "${RED}‚ùå ERREUR: Vous n'√™tes pas dans le bon dossier!${NC}"
    echo -e "   Dossier actuel: ${YELLOW}$CURRENT_DIR${NC}"
    echo -e "   Dossier attendu: ${GREEN}$EXPECTED_DIR${NC}"
    exit 1
fi

# V√©rification 2: Bon package.json ?
if ! grep -q "$PROJECT_NAME" package.json; then
    echo -e "${RED}‚ùå ERREUR: Le package.json ne correspond pas au projet $PROJECT_NAME${NC}"
    exit 1
fi

# V√©rification 3: Bon projet Vercel ?
echo -e "${YELLOW}üìã V√©rification du projet Vercel...${NC}"

# V√©rifier le projet li√©
if [ -f ".vercel/project.json" ]; then
    # R√©cup√©rer le nom du projet depuis vercel ls
    VERCEL_OUTPUT=$(vercel ls 2>&1 | grep -A1 "Retrieving project")
    VERCEL_NAME=$(echo "$VERCEL_OUTPUT" | grep "/" | sed -n 's/.*\/\([^ ]*\).*/\1/p')

    if [ -z "$VERCEL_NAME" ]; then
        # Fallback: essayer une autre m√©thode
        VERCEL_NAME=$(vercel ls 2>&1 | grep "smaaks-sport-connect" | head -1)
    fi

    if [[ "$VERCEL_NAME" == *"smaaks-sport-connect"* ]]; then
        echo -e "${GREEN}‚úÖ Projet Vercel v√©rifi√©: smaaks-sport-connect${NC}"
    else
        echo -e "${RED}‚ùå ERREUR: Le projet Vercel ne correspond pas √† smaaks-sport-connect!${NC}"
        echo -e "${YELLOW}Utilisez 'vercel link' pour lier le bon projet${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aucun projet Vercel li√©. Utilisez 'vercel link' d'abord${NC}"
    exit 1
fi

vercel ls | head -n 5

echo ""
read -p "‚ö†Ô∏è  Confirmez le d√©ploiement de $PROJECT_NAME (oui/non): " confirm
if [ "$confirm" != "oui" ]; then
    echo -e "${RED}‚ùå D√©ploiement annul√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ D√©ploiement de $PROJECT_NAME...${NC}"

# ==============================================================================
# üìã VALIDATION COMPL√àTE AVEC validate.sh
# ==============================================================================
echo -e "${YELLOW}üìã Lancement de la validation compl√®te...${NC}"
echo ""

# Ex√©cuter validate.sh pour tout v√©rifier d'un coup
if [ -f "./validate.sh" ]; then
    echo -e "${YELLOW}üîç Ex√©cution de validate.sh...${NC}"
    if ./validate.sh; then
        echo -e "${GREEN}‚úÖ Toutes les validations ont r√©ussi !${NC}"
    else
        echo -e "${RED}‚ùå La validation a √©chou√©${NC}"
        echo -e "${YELLOW}üí° Corrigez les erreurs ci-dessus avant de d√©ployer${NC}"
        read -p "Voulez-vous continuer malgr√© tout? (oui/non): " force_deploy
        if [ "$force_deploy" != "oui" ]; then
            echo -e "${RED}‚ùå D√©ploiement annul√©${NC}"
            exit 1
        fi
    fi
else
    # Fallback si validate.sh n'existe pas
    echo -e "${YELLOW}‚ö†Ô∏è  validate.sh introuvable, v√©rifications basiques...${NC}"
    echo -e "${YELLOW}   üìù V√©rification des erreurs ESLint courantes...${NC}"

ESLINT_ERRORS=0

# Chercher les apostrophes non √©chapp√©es
if grep -r "l'" src/ --include="*.tsx" --include="*.ts" | grep -v "l&apos;" | grep -v "l\'" > /dev/null 2>&1; then
    echo -e "${RED}   ‚ùå Apostrophes non √©chapp√©es trouv√©es (remplacer ' par &apos;)${NC}"
    ESLINT_ERRORS=1
fi

# Chercher les variables error inutilis√©es dans catch
if grep -r "} catch (error) {" src/ --include="*.tsx" --include="*.ts" > /dev/null 2>&1; then
    echo -e "${YELLOW}   ‚ö†Ô∏è  Variables 'error' potentiellement inutilis√©es dans catch blocks${NC}"
    echo -e "${YELLOW}      Remplacer par '} catch {' si la variable n'est pas utilis√©e${NC}"
fi

# Chercher les d√©pendances manquantes dans useEffect/useCallback
if grep -r "useEffect\|useCallback" src/ --include="*.tsx" --include="*.ts" | grep -A5 -B5 "user\|db" | grep -v "dependencies" > /dev/null 2>&1; then
    echo -e "${YELLOW}   ‚ö†Ô∏è  V√©rifier les d√©pendances des hooks (useEffect/useCallback)${NC}"
fi

# Chercher les imports inutilis√©s
echo -e "${YELLOW}   üîç Recherche des imports potentiellement inutilis√©s...${NC}"

# V√©rification 5: Build de test
echo -e "${YELLOW}   üî® Test de build local...${NC}"
if npm run build > /dev/null 2>&1; then
    echo -e "${GREEN}   ‚úÖ Build local r√©ussi${NC}"
else
    echo -e "${RED}   ‚ùå Build local √©chou√© - v√©rifiez les erreurs TypeScript/ESLint${NC}"
    echo -e "${YELLOW}   üí° Commandes de d√©bogage:${NC}"
    echo -e "${YELLOW}      - npm run build (voir les erreurs d√©taill√©es)${NC}"
    echo -e "${YELLOW}      - npm run lint (v√©rifier ESLint)${NC}"
    echo -e "${YELLOW}      - npm run typecheck (si disponible)${NC}"
    ESLINT_ERRORS=1
fi

echo ""
echo -e "${YELLOW}üìã TODO Manuel avant d√©ploiement:${NC}"
echo -e "${YELLOW}‚òê 1. Tous les apostrophes sont √©chapp√©s avec &apos;${NC}"
echo -e "${YELLOW}‚òê 2. Variables 'error' inutilis√©es remplac√©es par 'catch {'${NC}"
echo -e "${YELLOW}‚òê 3. D√©pendances useEffect/useCallback correctes${NC}"
echo -e "${YELLOW}‚òê 4. Imports inutilis√©s supprim√©s${NC}"
echo -e "${YELLOW}‚òê 5. Build local fonctionne (npm run build)${NC}"
echo -e "${YELLOW}‚òê 6. Tests passent (si disponibles)${NC}"
echo -e "${YELLOW}‚òê 7. Variables d'environnement configur√©es${NC}"
echo -e "${YELLOW}‚òê 8. Pas de console.log sensibles${NC}"
echo ""

fi # Fermer le if [ -f "./validate.sh" ]

if [ $ESLINT_ERRORS -eq 1 ]; then
    echo -e "${RED}‚ùå Des probl√®mes ont √©t√© d√©tect√©s!${NC}"
    echo -e "${YELLOW}üí° Corrigez les probl√®mes ci-dessus avant de d√©ployer${NC}"
    read -p "Voulez-vous continuer malgr√© tout? (oui/non): " force_deploy
    if [ "$force_deploy" != "oui" ]; then
        echo -e "${RED}‚ùå D√©ploiement annul√©${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}üöÄ Lancement du d√©ploiement Vercel...${NC}"
vercel --prod