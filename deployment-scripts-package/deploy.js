#!/usr/bin/env node

/**
 * Script de d√©ploiement s√©curis√© Next.js
 * Usage: node deploy.js [--force] [--skip-checks]
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration - √Ä personnaliser pour votre projet
const PROJECT_CONFIG = {
  // Nom de votre projet (sera v√©rifi√© dans package.json)
  projectName: 'your-project-name',
  // Nom du dossier attendu
  expectedDir: 'your-project-folder',
  // Variables d'environnement Firebase requises (optionnel)
  requiredEnvVars: [
    'NEXT_PUBLIC_FIREBASE_API_KEY',
    'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN',
    'NEXT_PUBLIC_FIREBASE_PROJECT_ID'
  ]
};

// Couleurs pour le terminal
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

const log = (color, message) => console.log(`${colors[color]}${message}${colors.reset}`);

// Arguments en ligne de commande
const args = process.argv.slice(2);
const force = args.includes('--force');
const skipChecks = args.includes('--skip-checks');

/**
 * V√©rifications de base
 */
function basicChecks() {
  log('yellow', 'üìã V√©rifications de base...\n');

  // 1. V√©rifier le dossier (optionnel si configur√©)
  if (PROJECT_CONFIG.expectedDir !== 'your-project-folder') {
    const currentDir = path.basename(process.cwd());
    if (currentDir !== PROJECT_CONFIG.expectedDir) {
      log('red', `‚ùå ERREUR: Mauvais dossier!`);
      log('yellow', `   Actuel: ${currentDir}`);
      log('green', `   Attendu: ${PROJECT_CONFIG.expectedDir}`);
      process.exit(1);
    }
    log('green', '‚úÖ Bon dossier de projet');
  }

  // 2. V√©rifier package.json
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (PROJECT_CONFIG.projectName !== 'your-project-name' && !packageJson.name.includes(PROJECT_CONFIG.projectName)) {
      log('red', `‚ùå ERREUR: package.json ne correspond pas au projet ${PROJECT_CONFIG.projectName}`);
      process.exit(1);
    }
    log('green', '‚úÖ package.json correct');
  } catch (error) {
    log('red', '‚ùå ERREUR: Impossible de lire package.json');
    process.exit(1);
  }

  // 3. V√©rifier projet Vercel
  if (!fs.existsSync('.vercel/project.json')) {
    log('red', '‚ùå ERREUR: Aucun projet Vercel li√©');
    log('yellow', 'üí° Utilisez "vercel link" d\'abord');
    process.exit(1);
  }
  log('green', '‚úÖ Projet Vercel li√©');
}

/**
 * V√©rifications ESLint avanc√©es
 */
function eslintChecks() {
  log('yellow', 'üìù V√©rifications ESLint avanc√©es...\n');

  let errors = 0;
  const srcPath = path.join(process.cwd(), 'src');

  // Chercher les apostrophes non √©chapp√©es
  try {
    execSync(`grep -r "l'" ${srcPath} --include="*.tsx" --include="*.ts" | grep -v "l&apos;" | grep -v "l\\\'"`, { stdio: 'pipe' });
    log('red', '‚ùå Apostrophes non √©chapp√©es trouv√©es (remplacer \' par &apos;)');
    errors++;
  } catch {
    log('green', '‚úÖ Apostrophes correctement √©chapp√©es');
  }

  // Chercher les variables error inutilis√©es
  try {
    const result = execSync(`grep -r "} catch (error) {" ${srcPath} --include="*.tsx" --include="*.ts"`, { encoding: 'utf8' });
    const count = result.trim().split('\n').length;
    if (count > 0) {
      log('yellow', `‚ö†Ô∏è  ${count} variables 'error' potentiellement inutilis√©es`);
      console.log(result);
    }
  } catch {
    log('green', '‚úÖ Pas de variables error inutilis√©es');
  }

  // Test de build
  log('yellow', 'üî® Test de build local...');
  try {
    execSync('npm run build', { stdio: 'pipe' });
    log('green', '‚úÖ Build local r√©ussi');
  } catch (error) {
    log('red', '‚ùå Build local √©chou√©');
    log('yellow', 'üí° Commandes de d√©bogage:');
    log('yellow', '   - npm run build (voir erreurs d√©taill√©es)');
    log('yellow', '   - npm run lint (v√©rifier ESLint)');
    errors++;
  }

  return errors;
}

/**
 * V√©rifications Firebase/OAuth (optionnel)
 */
function firebaseChecks() {
  log('yellow', 'üî• V√©rifications Firebase...\n');

  // V√©rifier .env.local
  if (!fs.existsSync('.env.local')) {
    log('red', '‚ùå Fichier .env.local manquant');
    return 1;
  }

  const envContent = fs.readFileSync('.env.local', 'utf8');

  let missing = 0;
  PROJECT_CONFIG.requiredEnvVars.forEach(varName => {
    if (!envContent.includes(varName)) {
      log('red', `‚ùå Variable manquante: ${varName}`);
      missing++;
    }
  });

  if (missing === 0) {
    log('green', '‚úÖ Variables Firebase configur√©es');
  }

  return missing;
}

/**
 * Afficher la checklist manuelle
 */
function showManualChecklist() {
  log('yellow', '\nüìã Checklist manuelle:\n');

  const checklist = [
    'Variables d\'environnement configur√©es sur Vercel',
    'Build et tests passent en local',
    'Domaines autoris√©s configur√©s (si Firebase)',
    'OAuth 2.0 Client ID configur√© (si Google Auth)',
    'Tests manuels effectu√©s',
    'Sauvegardes n√©cessaires effectu√©es'
  ];

  checklist.forEach((item, index) => {
    log('yellow', `‚òê ${index + 1}. ${item}`);
  });

  console.log('');
}

/**
 * Confirmation utilisateur
 */
function getUserConfirmation() {
  return new Promise((resolve) => {
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    rl.question('‚ö†Ô∏è  Confirmez le d√©ploiement (oui/non): ', (answer) => {
      rl.close();
      resolve(answer.toLowerCase() === 'oui');
    });
  });
}

/**
 * D√©ploiement Vercel
 */
function deploy() {
  log('green', 'üöÄ Lancement du d√©ploiement Vercel...\n');

  const vercelProcess = spawn('vercel', ['--prod'], {
    stdio: 'inherit',
    shell: true
  });

  vercelProcess.on('close', (code) => {
    if (code === 0) {
      log('green', '\nüéâ D√©ploiement r√©ussi!');
      log('blue', 'üîó V√©rifiez l\'URL de production dans la sortie ci-dessus');
    } else {
      log('red', '\n‚ùå D√©ploiement √©chou√©');
      process.exit(code);
    }
  });

  vercelProcess.on('error', (error) => {
    log('red', `‚ùå Erreur de d√©ploiement: ${error.message}`);
    process.exit(1);
  });
}

/**
 * Fonction principale
 */
async function main() {
  log('blue', 'üöÄ Script de D√©ploiement S√©curis√© Next.js\n');

  try {
    // V√©rifications de base
    basicChecks();

    // V√©rifications avanc√©es (sauf si --skip-checks)
    if (!skipChecks) {
      log('yellow', 'üîç Ex√©cution de la validation compl√®te (validate.sh)...\n');

      try {
        // Ex√©cuter validate.sh pour TOUTES les v√©rifications
        execSync('./validate.sh', { stdio: 'inherit' });
        log('green', '\n‚úÖ Validation compl√®te r√©ussie!\n');
      } catch (error) {
        log('red', '\n‚ùå La validation a d√©tect√© des erreurs!');

        if (!force) {
          log('yellow', 'üí° Corrigez les erreurs ci-dessus avant de d√©ployer');
          log('yellow', '   OU utilisez --force pour ignorer les erreurs\n');
          process.exit(1);
        } else {
          log('yellow', '‚ö†Ô∏è  Mode --force activ√©, d√©ploiement malgr√© les erreurs...\n');
        }
      }

      // V√©rifications Firebase sp√©cifiques (pas dans validate.sh)
      if (PROJECT_CONFIG.requiredEnvVars.length > 0) {
        const firebaseErrors = firebaseChecks();

        if (firebaseErrors > 0 && !force) {
          log('red', `\n‚ùå ${firebaseErrors} probl√®me(s) Firebase d√©tect√©(s)!`);
          process.exit(1);
        }
      }
    }

    // Checklist manuelle
    showManualChecklist();

    // Confirmation utilisateur (sauf si --force)
    if (!force) {
      const confirmed = await getUserConfirmation();
      if (!confirmed) {
        log('red', '‚ùå D√©ploiement annul√©');
        process.exit(0);
      }
    }

    // D√©ploiement
    deploy();

  } catch (error) {
    log('red', `‚ùå Erreur: ${error.message}`);
    process.exit(1);
  }
}

// Aide
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
Usage: node deploy.js [options]

Configuration:
  √âditez la variable PROJECT_CONFIG en haut du fichier pour personnaliser :
  - projectName: nom de votre projet
  - expectedDir: dossier attendu
  - requiredEnvVars: variables d'environnement requises

Options:
  --force        Ignorer les erreurs et la confirmation
  --skip-checks  Ignorer les v√©rifications ESLint/TypeScript
  --help, -h     Afficher cette aide

Exemples:
  node deploy.js                    # D√©ploiement normal avec v√©rifications
  node deploy.js --force            # D√©ploiement forc√© sans confirmation
  node deploy.js --skip-checks      # Ignorer les v√©rifications avanc√©es
`);
  process.exit(0);
}

// Ex√©cution
main();